import { readFile, writeFile, mkdir } from "fs/promises";
import { resolve, relative } from "pathe";
import type { Nitro } from "nitro/types";
import { scan } from ".";

export async function writeNovaTypes(
  nitro: Nitro,
  moduleName: string,
  features: Record<string, string>
) {
  const typesDir = resolve(nitro.options.buildDir, "types");
  const novaTypesPath = resolve(typesDir, `${moduleName}-types.d.ts`);

  // there is a chance we get here and the "types" folder does not exist
  // so we need to create it
  try {
    await readFile(novaTypesPath);
  } catch (e) {
    await mkdir(typesDir, { recursive: true });
  }

  let content = `// Generated by ${moduleName} with Nova\n\n`;
  content += `import type { Nitro, Serialize, Simplify, NitroApp, NitroRuntimeHooks, NitroHooks } from "nitro/types";\n\n`;

  content += `declare module "nitro/types" {\n`;
  content += `  interface NitroRuntimeHooks {\n`;
  content += `    'nova:before': (nitroApp: NitroApp) => HookResult\n`;
  content += `    'nova:after': (nitroApp: NitroApp) => HookResult\n`;
  content += `    'nova:error': (nitroApp: NitroApp) => HookResult\n`;
  content += `  }\n`;

  content += `  interface NitroHooks {\n`;
  content += `    'nova:before': (nitro: Nitro) => HookResult\n`;
  content += `    'nova:after': (nitro: Nitro) => HookResult\n`;
  content += `    'nova:error': (nitro: Nitro) => HookResult\n`;
  content += `  }\n`;

  content += `}\n`;

  content += `declare module "@gtc-nova/kit" {\n`;
  content += `  type Awaited<T> = T extends PromiseLike<infer U> ? Awaited<U> : T\n`;

  for (const [featureName, featureFolder] of Object.entries(features)) {
    const scannedFeatures = await scan({
      nitro,
      feature: { name: featureName, folder: featureFolder },
    });
    const featuresName = `scanned${
      featureName.charAt(0).toUpperCase() + featureName.slice(1)
    }`;

    content += `  interface ${
      featureName.charAt(0).toUpperCase() + featureName.slice(1)
    }Handlers {\n`;

    console.log("scannedFeatures", scannedFeatures);
    for (const sc of scannedFeatures[
      featuresName as keyof typeof scannedFeatures
    ]) {
      const relativePath = relative(nitro.options.rootDir, sc.handler);
      content += `    '${sc.route}': typeof import('../../${relativePath}').default\n`;
    }
    content += `  }\n`;
  }

  content += `  interface NovaFeatures {\n`;
  content += `    ${moduleName}: {\n`;
  for (const [featureName, featureFolder] of Object.entries(features)) {
    content += `      ${featureName}: ${
      featureName.charAt(0).toUpperCase() + featureName.slice(1)
    }Handlers\n`;
  }
  content += `    }\n`;

  content += `}\n`;

  content += `  }\n`;

  await writeFile(novaTypesPath, content);
}
